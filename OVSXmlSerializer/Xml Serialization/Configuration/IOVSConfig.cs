namespace OVSSerializer.Xml
{
	using System;
	using System.Collections.Generic;
	using System.Globalization;
	using System.Security;
	using System.Text;
	using System.Xml.Serialization;
	using System.Xml;

	/// <summary>
	/// An interface to act as a configuration tool to modify and take info from.
	/// </summary>
	public interface IOVSConfig
	{
		/// <summary>
		/// Gets or sets the culture, which will handle primitive printing. Set
		/// as <see cref="CultureInfo.InvariantCulture"/> for cross-compatibility
		/// between computers, but can be set to other cultures if needed.
		/// </summary>
		CultureInfo CurrentCulture { get; set; }
		/// <summary>
		/// Whenever a reference type is made, and multiple things use the same
		/// instance of the reference type, then it will simply use an ID system
		/// to refer to said instance. Disabling this removes this feature. Disabled
		/// by default.
		/// </summary>
		bool UseSingleInstanceInsteadOfMultiple { get; set; }
		/// <summary>
		/// The current version of the XML file. Null if you don't want any
		/// attributes assigned to the root element
		/// </summary>
		Version Version { get; set; }
		/// <summary>
		/// If the object is set to <see langword="null"/> on the reader, or missing entirely,
		/// it will instead allow the default to be set instead on enabled. Where
		/// leaving it disabled to set it to <see langword="null"/> instead.
		/// </summary>
		bool IgnoreUndefinedValues { get; set; }
		/// <summary>
		/// A list that overrides the traditional field system, sometimes for
		/// readability. Uses <see cref="InterfaceSerializer.GetDefault"/> as default.
		/// </summary>
		InterfaceSerializer CustomSerializers { get; set; }
		/// <summary>
		/// Disables the use of the comment about being auto-generated by
		/// OVSXmlSerializer. Enabled by default.
		/// </summary>
		bool OmitAutoGenerationComment { get; set; }
		/// <summary>
		/// When reading a file, it will check the version. This setting will determine
		/// the leniancy that it has to allow parsing it.
		/// </summary>
		Versioning.Leniency VersionLeniency { get; set; }
		/// <summary>
		/// Whenever it should add a new line when declaring attributes.
		/// </summary>
		bool NewLineOnAttributes { get; set; }
		/// <summary>
		/// Gets or sets a value indicating whether to omit an XML declaration.
		/// The declaration mentions the beginning element, that typically mentions
		/// the encoding type and the version of the XML.
		/// </summary>
		/// <returns>
		/// <see langword="true"/> to omit the XML declaration; otherwise, <see langword="false"/>. 
		/// Default is <see langword="true"/>, as it is autogenerated and most likely
		/// be handled by the <see cref="OVSXmlSerializer{T}"/> again.
		/// </returns>
		bool OmitXmlDelcaration { get; set; }
		/// <summary>
		/// The single indentation that should occur. This will be repeated as 
		/// layers are added further.
		/// </summary>
		string IndentChars { get; set; }
		/// <summary>
		/// When writing onto a file, if it should have indentation such as '\n'.
		/// </summary>
		bool Indent { get; set; }
		/// <summary>
		/// When writing the XML Declaration, there is a value that tells if the
		/// XML document is standalone, which is 'no' or <see langword="false"/>
		/// by most documents. In order to be <see langword="true"/>, or 'yes', 
		/// it has to pass the following conditions:
		/// <list type="bullet">
		/// <item>No default attribute values are specified for elements</item>
		/// <item>No entity references used in the instance document are defined</item>
		/// <item>No attribute values need to be normalized</item>
		/// <item>No elements contain ignorable white space.</item>
		/// </list>
		/// There is more information about this here: http://www.cafeconleche.org/books/effectivexml/chapters/01.html,
		/// but feel free to leave this as <see langword="null"/>, as this is the
		/// default setting for <see cref="XmlDocument"/> or <see cref="XmlWriter"/>
		/// and serialization.
		/// </summary>
		bool? StandaloneDeclaration { get; set; }
		/// <summary>
		/// how the XML file from <see cref="XmlSerializer"/> should handle types. 
		/// </summary>
		IncludeTypes TypeHandling { get; set; }
		/// <summary>
		/// How the writer should handle readonly field. <see cref="ReadonlyFieldHandle.Continue"/>
		/// as default. This can be manipulated when concerning coding in restricted 
		/// environment.when it throws a <see cref="VerificationException"/>
		/// </summary>
		ReadonlyFieldHandle HandleReadonlyFields { get; set; }
		/// <summary>
		/// The encoding of the result of the file.
		/// </summary>
		Encoding Encoding { get; set; }
		/// <summary>
		/// Converts all data from the config to the relevant writer settings.
		/// </summary>
		XmlWriterSettings WriterSettings { get; set; }
		//{
		//	return new XmlWriterSettings()
		//	{
		//		Indent = Indent,
		//		IndentChars = IndentChars,
		//		Encoding = Encoding,
		//		OmitXmlDeclaration = OmitXmlDelcaration,
		//		NewLineOnAttributes = NewLineOnAttributes,
		//	};
		//}
	}
}
