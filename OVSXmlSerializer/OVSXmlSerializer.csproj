<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>netstandard2.0</TargetFramework>
		<ImplicitUsings>disable</ImplicitUsings>
		<Title>OVSXmlSerializer</Title>
		<VersionSuffix>pre3</VersionSuffix>
		<VersionPrefix>3.0.0</VersionPrefix>
		<RepositoryType>git</RepositoryType>
		<PlatformTarget>AnyCPU</PlatformTarget>
		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
		<Authors>AnOddDoorKnight</Authors>
		<Description>
			Odd's Very Special Xml Serializer is a Xml Serializer that is revolved around smart types; Explicit-type naming if needed.

			The system functions very simply: You put an object inside and it will serialize into a file or such in around 1-2 lines of code. Additionally, is meant to be worked with the `object` or more 'undefined' data that the ordinary XML serializer have difficulty handling, along with simulating reference types via ID.

			Unlike the traditional XML Serializer, this will use the type parameters in the class to automatically differentiate enums and arrays, which will remove the need to mark fields as `[XmlArray]` or `[XmlEnum]`. In place, there are custom serializers that you can insert in the config.
		</Description>
		<Copyright>MIT license</Copyright>
		<PackageProjectUrl>https://github.com/AnOddDoorKnight/OVSXmlSerializer</PackageProjectUrl>
		<PackageReadmeFile>Readme.md</PackageReadmeFile>
		<PackageTags>C#; Serialization; XML; XML-Parsing</PackageTags>
		<PackageReleaseNotes>
			preview 1:
			- Made most classes into a separate 'OVS' prefix to separate them from the system xml serialization more
			- Versions feature works a bit differently, i think null values are treated as 1.0 now?
			- Things like date-time and lists can have their own external compile config.
			- Normal IEnumerables are no longer written/serialized.
			- Removed the ignore xml enumerable and instead added a new attribute titled xmlignoreconfigs instead
			- Added some OSFile implementation that considers Unix and Windows systems for pathing info as an extra that probably would do better as its own library
			- Added pre-processor info about the serializer
			preview 2:
			- Added missing a single missing method regarding copying contents to a normal stream like a file stream.
			- Wrote some additional minor xml documentation.
			- Updated the readme a bit
			- Changed the namespace from OVSXmlSerializer to OVSSerializer to prevent some weird issues that may have to be fixed by using global::
			- Made some errors properly throw some exceptions.
			preview 3:
			- Changed directive from easy system.xml.serialization to its own thing.
			- Updated the description.
			- Changed most generic classes to non-generic due to below:
			- Removed the config, and the serializers fill that role instead. IOVSConfigs interface are now in place if you still need something like it.
			- Added a missing OSFile de-serializer method that was missing.
		</PackageReleaseNotes>
		<PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
		<OutputType>Library</OutputType>
		<RepositoryUrl>https://github.com/AnOddDoorKnight/OVSXmlSerializer</RepositoryUrl>
		<GenerateDocumentationFile>True</GenerateDocumentationFile>
		<RootNamespace>OVSSerializer</RootNamespace>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<CheckForOverflowUnderflow>True</CheckForOverflowUnderflow>
		<DebugType>embedded</DebugType>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
		<CheckForOverflowUnderflow>True</CheckForOverflowUnderflow>
		<DebugType>embedded</DebugType>
	</PropertyGroup>

	<ItemGroup>
		<None Include="..\LICENSE.txt">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
		<None Include="..\Readme.md">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
	</ItemGroup>

	<ItemGroup>
		<Folder Include="bin\Debug\netcoreapp2.0\" />
		<Folder Include="Version Auto-Converters\" />
		<Folder Include="Properties\PublishProfiles\" />
	</ItemGroup>

</Project>